{"version":3,"sources":["routes.js","supabaseClient.js","layout/Header.js","layout/SideNav.js","db/profile.js","auth/SignUp.js","auth/LogIn.js","pages/Account.js","db/reservations.js","pages/Pay.js","pages/Reservations.js","App.js","reportWebVitals.js","index.js"],"names":["RESERVATIONS","ACCOUNT","supabase","createClient","process","Header","session","id","border","Heading","flex","isCreated","Button","onClick","auth","signOut","iconAfter","LogOutIcon","LogInIcon","SideNav","to","TABLE_NAME","getProfile","a","user","from","select","eq","single","data","error","status","createProfile","type","values","insert","returning","SignUp","useState","loading","setLoading","email","setEmail","accountType","setAccountType","useEffect","handleSignUp","window","location","reload","alert","error_description","message","TextInputField","label","required","placeholder","value","disabled","SelectField","onChange","e","target","isLoading","preventDefault","Auth","handleLogin","signIn","toaster","notify","Pane","padding","Text","Account","created_at","setCreatedAt","Card","getPastReservations","lt","Date","toISOString","reservations","console","log","getCurrentReservations","gt","createReservation","reservation","user_id","INITIAL_DATE","Pay","date","licensePlate","setLicensePlate","count","setCount","expiry","setExpiry","handlePay","warning","license_plate","success","updatedDate","addMinutes","updateDate","backgroundColor","elevation","borderRadius","marginX","display","flexDirection","alignItems","gap","marginBottom","Strong","format","size","height","Reservations","past","setPast","current","setCurrent","fetchData","paddingX","Table","Head","TextHeaderCell","Body","map","item","Row","TextCell","formatDistanceToNow","addSuffix","formatDistanceStrict","roundingMethod","Home","setSession","getProfileAndSetSession","then","res","finally","onAuthStateChange","_event","Spinner","className","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.060fa4c0.chunk.js","sourcesContent":["export const PAY = \"/\";\n\nexport const RESERVATIONS = \"/reservations\";\n\nexport const ACCOUNT = \"/account\";\n","import { createClient } from \"@supabase/supabase-js\";\n\nconst supabaseUrl = process.env.REACT_APP_SUPABASE_URL;\nconst supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n","import { Button, Heading, LogInIcon, LogOutIcon } from \"evergreen-ui\";\nimport { supabase } from \"../supabaseClient\";\n\nexport default function Header({ session }) {\n  return (\n    <header id=\"header\" border=\"default\">\n      <Heading flex={1}>SupaParking</Heading>\n      {session && session.isCreated ? (\n        <Button onClick={() => supabase.auth.signOut()} iconAfter={LogOutIcon}>\n          Log Out\n        </Button>\n      ) : (\n        <Button iconAfter={LogInIcon}>Log In</Button>\n      )}\n    </header>\n  );\n}\n","import { Button } from \"evergreen-ui\";\nimport { Link } from \"react-router-dom\";\nimport { ACCOUNT, PAY, RESERVATIONS } from \"../routes\";\n\nexport default function SideNav() {\n  return (\n    <nav>\n      <Link to={PAY}>\n        <Button>Pay</Button>\n      </Link>\n      <Link to={RESERVATIONS}>\n        <Button>Reservations</Button>\n      </Link>\n      <Link to={ACCOUNT}>\n        <Button>Account</Button>\n      </Link>\n    </nav>\n  );\n}\n","import { supabase } from \"../supabaseClient\";\n\nconst TABLE_NAME = \"profiles\";\n\nexport const getProfile = async () => {\n  const user = supabase.auth.user();\n  if (!user) return null;\n  let { data, error, status } = await supabase\n    .from(TABLE_NAME)\n    .select(`id`)\n    .eq(\"id\", user.id)\n    .single();\n\n  // console.log(data, error, status);\n  return { data, error, status };\n};\n\nexport const createProfile = async (type) => {\n  const user = supabase.auth.user();\n  const values = [\n    {\n      id: user.id,\n      type,\n    },\n  ];\n\n  return supabase.from(TABLE_NAME).insert(values, {\n    // Don't return the value after inserting\n    returning: \"minimal\",\n  });\n};\n","import { useEffect, useState } from \"react\";\nimport { Button, SelectField, TextInputField } from \"evergreen-ui\";\nimport { createProfile } from \"../db/profile\";\nimport { supabase } from \"../supabaseClient\";\n\nexport default function SignUp() {\n  const [loading, setLoading] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [accountType, setAccountType] = useState(\"user\");\n\n  useEffect(() => {\n    const user = supabase.auth.user();\n    setEmail(user.email);\n  }, []);\n\n  const handleSignUp = async (type) => {\n    try {\n      setLoading(true);\n      const { error } = await createProfile(type);\n      if (error) throw error;\n      setLoading(false);\n      // TODO: get rid of hack by using react-router\n      window.location.reload();\n    } catch (error) {\n      alert(error.error_description || error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form>\n      <TextInputField\n        id=\"email\"\n        label=\"Email\"\n        required\n        type=\"email\"\n        placeholder=\"Your email\"\n        value={email}\n        disabled\n      />\n\n      <SelectField\n        label=\"Account type\"\n        required\n        value={accountType}\n        onChange={(e) => setAccountType(e.target.value)}\n      >\n        <option value=\"user\">User</option>\n        <option value=\"admin\">Admin</option>\n      </SelectField>\n\n      <Button\n        isLoading={loading}\n        onClick={(e) => {\n          e.preventDefault();\n          handleSignUp(accountType);\n        }}\n      >\n        Continue\n      </Button>\n    </form>\n  );\n}\n","import {\n  Button,\n  Heading,\n  Pane,\n  Text,\n  TextInputField,\n  toaster,\n} from \"evergreen-ui\";\nimport { useState } from \"react\";\nimport { supabase } from \"../supabaseClient\";\n\nexport default function Auth() {\n  const [loading, setLoading] = useState(false);\n  const [email, setEmail] = useState(\"\");\n\n  const handleLogin = async (email) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.signIn({ email });\n      if (error) throw error;\n\n      toaster.notify(\"Check your email for the login link!\");\n      setEmail(\"\");\n    } catch (error) {\n      alert(error.error_description || error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Pane padding={40}>\n      <Heading>Supabase + React</Heading>\n      <Text>Sign in via magic link with your email below</Text>\n\n      <TextInputField\n        id=\"email\"\n        label=\"Email\"\n        required\n        type=\"email\"\n        placeholder=\"Your email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n\n      <Button\n        isLoading={loading}\n        onClick={(e) => {\n          e.preventDefault();\n          handleLogin(email);\n        }}\n      >\n        Send magic link\n      </Button>\n    </Pane>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { supabase } from \"../supabaseClient\";\nimport { Card, Heading } from \"evergreen-ui\";\n\nexport default function Account({ session }) {\n  const [loading, setLoading] = useState(true);\n  const [email, setEmail] = useState(null);\n  const [created_at, setCreatedAt] = useState(null);\n\n  useEffect(() => {\n    getProfile();\n  }, [session]);\n\n  async function getProfile() {\n    try {\n      setLoading(true);\n\n      const user = supabase.auth.user();\n\n      setEmail(user.email);\n\n      let { data, error, status } = await supabase\n        .from(\"profiles\")\n        .select(`*`)\n        .eq(\"id\", user.id)\n        .single();\n\n      if (error && status !== 406) {\n        throw error;\n      }\n\n      if (data) {\n        setCreatedAt(data.created_at);\n      }\n    } catch (error) {\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <Card>\n      <Heading>Email: {email}</Heading>\n      <Heading>Created at: {created_at}</Heading>\n    </Card>\n  );\n}\n","import { supabase } from \"../supabaseClient\";\n\nconst TABLE_NAME = \"reservations\";\n\nexport const checkIfReservationExpired = async (plate) => {\n  // get reservations that match license plate and have expiry in the future\n  const reservations = await supabase\n    .from(TABLE_NAME)\n    .select(\"*\")\n    .eq(\"license_plate\", plate)\n    .gt(\"expiry\", new Date().toISOString());\n\n  // if we have ongoing reservations for this license plate, isReservationExpired = false\n  return !reservations.length;\n};\n\nexport const getPastReservations = async () => {\n  const reservations = await supabase\n    .from(TABLE_NAME)\n    .select(\"*\")\n    .lt(\"expiry\", new Date().toISOString());\n  console.log(reservations);\n  return reservations;\n};\n\nexport const getCurrentReservations = async () => {\n  const reservations = await supabase\n    .from(TABLE_NAME)\n    .select(\"*\")\n    .gt(\"expiry\", new Date().toISOString());\n  console.log(reservations);\n  return reservations;\n};\n\nexport const createReservation = (reservation) => {\n  const user = supabase.auth.user();\n  const values = [{ user_id: user.id, ...reservation }];\n  return supabase.from(TABLE_NAME).insert(values);\n};\n","import { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  Heading,\n  Strong,\n  TextInputField,\n  toaster,\n} from \"evergreen-ui\";\nimport { format, addMinutes } from \"date-fns\";\nimport { createReservation } from \"../db/reservations\";\n\nconst INITIAL_DATE = new Date();\n\nexport default function Pay() {\n  const INITIAL_COUNT = 1;\n\n  const [loading, setLoading] = useState(false);\n  const [licensePlate, setLicensePlate] = useState(\"\");\n  const [count, setCount] = useState(INITIAL_COUNT);\n  const [expiry, setExpiry] = useState(INITIAL_DATE);\n\n  const handlePay = async () => {\n    try {\n      setLoading(true);\n\n      if (!licensePlate) {\n        toaster.warning(\"Please enter a license plate.\");\n        return;\n      }\n\n      const reservation = {\n        license_plate: licensePlate,\n        expiry: expiry.toISOString(),\n      };\n      console.log(reservation);\n\n      const { error } = await createReservation(reservation);\n      if (error) throw error;\n\n      toaster.success(\"You have paid for the parking spot.\");\n\n      setLicensePlate(\"\");\n      setCount(INITIAL_COUNT);\n    } catch (error) {\n      alert(error.error_description || error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const formatDate = (date) =>\n    `Park until ${format(date, \"HH:mm (dd/MM/yyyy)\")}`;\n\n  const formatTime = () => `in ${5 * count} minutes`;\n\n  const refreshCount = () => setCount(INITIAL_COUNT);\n\n  const decrementCount = () => {\n    if (count > INITIAL_COUNT) {\n      setCount(count - 1);\n    }\n  };\n\n  const incrementCount = () => setCount(count + 1);\n\n  useEffect(() => {\n    const updateDate = () => {\n      const updatedDate = addMinutes(INITIAL_DATE, count * 5);\n      setExpiry(updatedDate);\n    };\n\n    updateDate();\n  }, [count]);\n\n  return (\n    <Card\n      backgroundColor=\"#F3F6FF\"\n      elevation={1}\n      borderRadius={4}\n      marginX={16}\n      padding={24}\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      gap={24}\n    >\n      <TextInputField\n        id=\"license-plate\"\n        type=\"text\"\n        required\n        label=\"License plate\"\n        placeholder=\"Enter license plate\"\n        value={licensePlate}\n        onChange={(e) => setLicensePlate(e.target.value)}\n        marginBottom={0}\n      />\n\n      <Strong>{formatDate(expiry)}</Strong>\n\n      <Card display=\"flex\" gap=\"10px\">\n        <Button onClick={() => refreshCount()}>🔄</Button>\n        <Button onClick={() => decrementCount()}>➖</Button>\n        <Heading size={800}>{formatTime(count)}</Heading>\n        <Button onClick={() => incrementCount()}>➕</Button>\n      </Card>\n\n      <Button\n        height={48}\n        isLoading={loading}\n        onClick={(e) => {\n          e.preventDefault();\n          handlePay();\n        }}\n        gap={8}\n      >\n        Pay\n        <span>🤑</span>\n      </Button>\n    </Card>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { Pane, Table } from \"evergreen-ui\";\nimport { format, formatDistanceStrict, formatDistanceToNow } from \"date-fns\";\nimport {\n  getCurrentReservations,\n  getPastReservations,\n} from \"../db/reservations\";\n\nexport default function Reservations() {\n  const [past, setPast] = useState([]);\n  const [current, setCurrent] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const { data: past } = await getPastReservations();\n      setPast(past);\n\n      const { data: current } = await getCurrentReservations();\n      setCurrent(current);\n    };\n\n    fetchData();\n  }, []);\n  return (\n    <Pane paddingX={16}>\n      <Table>\n        <Table.Head>\n          <Table.TextHeaderCell>Plate</Table.TextHeaderCell>\n          <Table.TextHeaderCell>Remaining time</Table.TextHeaderCell>\n          <Table.TextHeaderCell>Expires</Table.TextHeaderCell>\n        </Table.Head>\n\n        <Table.Body height={240}>\n          {current.map((item) => (\n            <Table.Row key={item.id}>\n              <Table.TextCell>{item.license_plate}</Table.TextCell>\n              <Table.TextCell>\n                {formatDistanceToNow(new Date(item.expiry), {\n                  addSuffix: true,\n                })}\n              </Table.TextCell>\n              <Table.TextCell>\n                {format(new Date(item.expiry), \"dd/MM/yyyy HH:mm\")}\n              </Table.TextCell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n\n      <Table>\n        <Table.Head>\n          <Table.TextHeaderCell>Plate</Table.TextHeaderCell>\n          <Table.TextHeaderCell>Duration</Table.TextHeaderCell>\n          <Table.TextHeaderCell>Start</Table.TextHeaderCell>\n          <Table.TextHeaderCell>End</Table.TextHeaderCell>\n        </Table.Head>\n\n        <Table.Body height={240}>\n          {past.map((item) => (\n            <Table.Row key={item.id}>\n              <Table.TextCell>{item.license_plate}</Table.TextCell>\n              <Table.TextCell>\n                {formatDistanceStrict(\n                  new Date(item.created_at),\n                  new Date(item.expiry),\n                  {\n                    roundingMethod: \"ceil\",\n                  }\n                )}\n              </Table.TextCell>\n              <Table.TextCell>\n                {format(new Date(item.created_at), \"dd/MM/yyyy HH:mm\")}\n              </Table.TextCell>\n              <Table.TextCell>\n                {format(new Date(item.expiry), \"dd/MM/yyyy HH:mm\")}\n              </Table.TextCell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </Pane>\n  );\n}\n","import \"./index.css\";\nimport { useState, useEffect } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { Spinner } from \"evergreen-ui\";\n\nimport { ACCOUNT, PAY, RESERVATIONS } from \"./routes\";\nimport { supabase } from \"./supabaseClient\";\n\nimport Header from \"./layout/Header\";\nimport SideNav from \"./layout/SideNav\";\nimport SignUp from \"./auth/SignUp\";\nimport LogIn from \"./auth/LogIn\";\nimport Account from \"./pages/Account\";\nimport Pay from \"./pages/Pay\";\nimport Reservations from \"./pages/Reservations\";\nimport { getProfile } from \"./db/profile\";\n\nexport default function Home() {\n  const [loading, setLoading] = useState(true);\n  const [session, setSession] = useState(null);\n\n  useEffect(() => {\n    async function getProfileAndSetSession() {\n      getProfile()\n        .then((res) => {\n          if (!res) return;\n          const { data, error, status } = res;\n          const isCreated = data && !error && status === 200;\n          console.log(\n            isCreated ? \"User exists in DB.\" : \"User does not exist in DB.\"\n          );\n          const session = {\n            ...supabase.auth.session(),\n            isCreated,\n          };\n          setSession(session);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n\n    getProfileAndSetSession();\n\n    supabase.auth.onAuthStateChange(async (_event, session) => {\n      getProfileAndSetSession();\n    });\n  }, []);\n\n  return loading ? (\n    <Spinner />\n  ) : (\n    <>\n      {!session ? (\n        <LogIn />\n      ) : session.isCreated ? (\n        <>\n          <Header session={session} />\n          <div className=\"container\">\n            <SideNav />\n            <main>\n              <Switch>\n                <Route path={PAY} exact>\n                  <Pay />\n                </Route>\n                <Route path={RESERVATIONS} exact>\n                  <Reservations />\n                </Route>\n                <Route path={ACCOUNT} exact>\n                  <Account session={session} />\n                </Route>\n                <Redirect to={PAY} />\n              </Switch>\n            </main>\n          </div>\n        </>\n      ) : (\n        <SignUp />\n      )}\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}